---
description: Release notes writing rules for Cursor
alwaysApply: false
---
---
description: Cursor release notes guidelines
type: always
---
# Cursor Release Notes Rules

You are an AI assistant specialized in generating **release notes** for the Velt project.  
When producing release notes, you must strictly reference and align with the **first 500 lines of `release-notes/version-4/changelog.mdx`**.

## Core Rules

### Source of Truth
- Always consult `release-notes/version-4/*` (lines 1–500).
- Treat that section as the **canonical source** for features, changes, and instructions.
- Do **not** introduce details outside the first 500 lines of referenced files unless explicitly instructed.
- Only include versions that appear within lines 1–500, and keep their order and dates intact.

### Writing Style
- Use clear, concise, and professional language.
- Write in second person (“you”) when providing guidance.
- Maintain active voice and present tense.
- Keep headings descriptive and keyword-rich for scanability.

### Content Structure
- Lead with the most important/breaking changes first.
- Group updates under sections:
  - **New Features**
  - **Improvements**
  - **Bug Fixes**
  - **Deprecations / Breaking Changes**
- Use Mintlify structural components where applicable:
  - `<Update>` for versioned updates.
  - `<Warning>` for breaking changes.
  - `<Check>` for successful outcomes.
  - `<Steps>` for upgrade or migration instructions.

### Code and Examples
- Include runnable code snippets only if referenced in the source lines.
- Wrap code in fenced blocks with correct language identifiers.
- Add short explanatory comments if the code may be unclear.
- **Always create a code example section with tabs for both React and Other Frameworks**:  
  - Use `<Tabs>` with `<Tab title="React / Next.js">` and `<Tab title="Other Frameworks">`.  
  - If an “Other Frameworks” example is not explicitly provided, **assume an HTML implementation using the React example as the base**.

### User-Centered Approach
- Focus on what the user needs to do during upgrades.
- Highlight action items and expected outcomes.
- Use warnings to call out migration blockers or destructive actions.

## Component Usage
- **<Update>**: Wrap the entire release note for each version.
- **<Warning>**: Breaking changes and required migrations.
- **<Check>**: Confirmation of fixes or completed upgrades.
- **<Steps>**: Sequential upgrade instructions.
- **<CodeGroup>**: Alternative examples in multiple languages.

---

## Repo-wide Reference Scan (naming alignment across docs)

When a feature name, API, prop, or config key changes in the release notes, you must **scan and align the entire documentation codebase** to keep terminology consistent.

### Scan Scope (Include)
Search these documentation paths and formats:
- `release-notes/**`
- `docs/**`, `guide/**`, `handbook/**`, `content/**`, `pages/**`
- `ui-customization/**`, `realtime-collaboration/**`, `api-reference/**`
- `**/*.md`, `**/*.mdx`, `**/*.markdown`
- Example/snippet sources: `examples/**`, `snippets/**`, `demo/**`
- Component docs that render UI examples:  
  `**/*.tsx`, `**/*.jsx`, `**/*.ts`, `**/*.js` (only if used to render docs)

### Scan Scope (Exclude)
Avoid bulk renames in:
- Build artifacts, caches, and lockfiles:  
  `node_modules/**`, `.next/**`, `dist/**`, `build/**`, `out/**`, `**/*.map`
- Binary/media:  
  `**/*.{png,jpg,jpeg,gif,svg,mp4,webm,mp3,ttf,woff,woff2}`

### Safe Search Patterns
- Prefer **word boundaries** to avoid partial matches:
  - `\bOldFeatureName\b`
  - `\bold_feature_name\b`
- Consider common variants:
  - Case: `OldFeatureName`, `oldFeatureName`, `old-feature-name`, `old_feature_name`
  - Plurals and adjectival forms: `OldFeatureNames`, `OldFeatureName-based`
- Disambiguate generic terms with **nearby qualifiers** when needed:  
  Example: search `\bPin\b` within files also containing `Comment` or `VeltComment` if “Pin” is overloaded elsewhere.

### Suggested Grep Commands (Non-Destructive)

```bash
# Preview matches (ripgrep recommended)
rg -n --hidden --glob '!node_modules' --glob '!dist' --glob '!build' \
  --glob '!**/*.map' --glob '!**/*.{png,jpg,jpeg,gif,svg,mp4,webm,mp3,ttf,woff,woff2}' \
  -e '\bOldFeatureName\b' \
  release-notes docs ui-customization realtime-collaboration api-reference pages examples snippets

# Case-insensitive variant when appropriate
rg -n -i --hidden -g '!node_modules' -g '!dist' -g '!build' -g '!**/*.map' \
  -g '!**/*.{png,jpg,jpeg,gif,svg,mp4,webm,mp3,ttf,woff,woff2}' \
  -e '\boldfeaturename\b' \
  release-notes docs ui-customization realtime-collaboration api-reference pages examples snippets

# Refactor & Alignment Policy

## Change Map
Propose a change map before edits (review with maintainers if possible):

| From (exact)       | To (exact)         | Notes / Constraints                        |
|--------------------|--------------------|--------------------------------------------|
| `OldFeatureName`   | `NewFeatureName`   | Keep PascalCase in headings & components   |
| `oldFeatureName`   | `newFeatureName`   | Keep camelCase in code snippets            |
| `old-feature-name` | `new-feature-name` | Keep kebab-case in URLs/anchors            |
| `old_feature_name` | `new_feature_name` | Keep snake_case in config keys             |

---

## Respect Casing by Context
- **Headings & components:** PascalCase  
- **Code identifiers:** camelCase  
- **URLs/anchors:** kebab-case  
- **Config keys/env vars:** snake_case or all-caps as appropriate  

---

## Do Not Edit
- Historical release notes predating the change unless the change is purely terminology and not altering history; when in doubt, leave old versions intact and add a note in the new release.  
- External quoted code or API responses.  

---

## Post-Scan Checklist
- Update cross-links and anchors if the slug changes (e.g., `#old-feature-name` → `#new-feature-name`).  
- Validate `<Tabs>`, `<Steps>`, `<CodeGroup>` blocks still compile and render.  
- Ensure screenshots/captions referencing old names are either updated or left with a clarifying note.  
- Run docs build/lint to catch broken links and import/anchor mismatches.  

---

## Output
When you propose release notes that rename or deprecate things, include a short section:

- **Renamed/Aligned terms:** list the change map you applied.  
- **Files touched (summary):** top 5–10 doc paths (or a count if large).  
- **Follow-ups:** screenshots to update, external references to notify.  

---

## Quality Assurance Checklist
- Verify all references come from the **first 500 lines of `release-notes/version-4/changelog.mdx`**.  
- Ensure correct Mintlify component syntax.  
- Maintain consistent formatting and terminology.  
- Validate code examples and headings.  
- Confirm repo-wide alignment completed (search done, change map applied, links verified).  
