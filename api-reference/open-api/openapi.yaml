openapi: 3.1.0
info:
  title: Velt REST API
  version: 2.0.0
  description: |
    Velt REST API for managing organizations, documents, folders, users, comments, notifications, and more.
    
    ## Authentication
    All endpoints require two headers:
    - `x-velt-api-key`: Your API key from Velt Console  
    - `x-velt-auth-token`: Your Auth Token
    
    ## Features
    - Organizations management
    - Document and folder management
    - User management with access control
    - Comment annotations
    - Real-time notifications
    - GDPR compliance tools
    
    ## Access Control
    Set `accessRole` to `viewer` (read-only) or `editor` (read/write) on each resource to define user capabilities.
  contact:
    name: Velt Support
    url: https://docs.velt.dev
  
servers:
  - url: https://api.velt.dev/v2
    description: Production server

security:
  - ApiKeyAuth: []
    AuthToken: []

tags:
  - name: Organizations
    description: Manage organizations - top-level containers for documents and users
  - name: Users
    description: Add, update, retrieve, and delete users with access control
  - name: Documents
    description: Manage documents within organizations
  - name: Folders
    description: Organize documents in folders
  - name: Auth
    description: Manage authentication tokens and user permissions
  - name: Notifications
    description: Handle user notifications
  - name: User Groups
    description: Manage organization user groups
  - name: Comments
    description: Manage comments and comment annotations
  - name: Workspace
    description: Configure workspace domains
  - name: Livestate
    description: Broadcast real-time events
  - name: GDPR
    description: GDPR compliance data operations

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-velt-api-key
      description: Your API key from the Velt Console
    AuthToken:
      type: apiKey
      in: header
      name: x-velt-auth-token
      description: Your Auth Token for authentication
  
  schemas:
    Organization:
      type: object
      required:
        - organizationId
        - organizationName
      properties:
        organizationId:
          type: string
          description: Unique identifier for the organization
          example: yourOrganizationId
        organizationName:
          type: string
          description: Display name of the organization
          example: Your Organization Name
        disabled:
          type: boolean
          description: Whether the organization is disabled
          example: false
    
    User:
      type: object
      required:
        - userId
        - name
        - email
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: yourUserId1
        name:
          type: string
          description: Display name of the user
          example: User Name
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@email.com
        accessRole:
          type: string
          enum: [viewer, editor]
          description: Access role for the resource (viewer for read-only, editor for read/write)
          example: editor
        initial:
          type: string
          description: User initials (auto-generated from name if not provided)
          example: UN
    
    Document:
      type: object
      required:
        - documentId
      properties:
        documentId:
          type: string
          description: Unique identifier for the document
          example: yourDocumentId
        documentName:
          type: string
          description: Display name of the document
          example: Your Document Name
        accessType:
          type: string
          enum: [public, restricted, organizationPrivate]
          description: |
            Access type of the document:
            - public: Anyone with the link can access
            - restricted: Only specified users can access
            - organizationPrivate: All users in the organization can access
          example: public
        disabled:
          type: boolean
          description: Whether the document is disabled
          example: false
        folderId:
          type: string
          description: ID of the folder this document belongs to
          example: yourFolderId
    
    Folder:
      type: object
      required:
        - folderId
      properties:
        folderId:
          type: string
          description: Unique identifier for the folder
          example: yourFolderId
        folderName:
          type: string
          description: Display name of the folder
          example: yourFolderName
        parentFolderId:
          type: string
          description: ID of the parent folder
          example: yourParentFolderId
        organizationId:
          type: string
          description: Organization ID the folder belongs to
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp of creation
        lastUpdated:
          type: integer
          format: int64
          description: Unix timestamp of last update
    
    Resource:
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          enum: [organization, document, folder]
          description: Type of resource
          example: organization
        id:
          type: string
          description: ID of the resource
          example: org_123
        organizationId:
          type: string
          description: Organization ID (required when type is document or folder)
          example: org_123
        accessRole:
          type: string
          enum: [viewer, editor]
          description: Access role for this resource
          default: editor
          example: editor
        expiresAt:
          type: integer
          format: int64
          description: Unix timestamp when permission expires (optional)
          example: 1640995200
    
    SuccessResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            status:
              type: string
              enum: [success]
              example: success
            message:
              type: string
              example: Operation completed successfully
            data:
              type: object
              description: Response data specific to the operation
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Error message describing what went wrong
              example: ERROR_MESSAGE
            status:
              type: string
              description: Error status code
              example: INVALID_ARGUMENT
    
    PermissionData:
      type: object
      required:
        - userId
        - resourceId
        - type
        - hasAccess
      properties:
        userId:
          type: string
          description: ID of the user this permission applies to
          example: user123
        resourceId:
          type: string
          description: ID of the resource (document, folder, or organization)
          example: document456
        type:
          type: string
          enum: [document, folder, organization]
          description: Type of the resource
          example: document
        hasAccess:
          type: boolean
          description: Whether the user has access to the resource
          example: true
        accessRole:
          type: string
          enum: [viewer, editor]
          description: Access role for the user (applicable for document resources)
          example: viewer
        expiresAt:
          type: integer
          format: int64
          description: UTC timestamp in milliseconds when this permission expires
          example: 1759745729823
    
    CommentAnnotation:
      type: object
      properties:
        annotationId:
          type: string
          description: Unique identifier for the annotation
          example: customAnnotationId
        location:
          type: object
          properties:
            id:
              type: string
              description: Location ID
            locationName:
              type: string
              description: Location name
        targetElement:
          type: object
          properties:
            elementId:
              type: string
              description: Element ID
            targetText:
              type: string
              description: Target text content
            occurrence:
              type: integer
              description: Occurrence number of the text
            selectAllContent:
              type: boolean
              description: Whether all content is selected
        status:
          type: object
          properties:
            id:
              type: string
              description: Status ID
            type:
              type: string
              enum: [default, ongoing]
              description: Status type
        priority:
          type: object
          properties:
            id:
              type: string
              description: Priority ID
            type:
              type: string
              description: Priority type
        from:
          $ref: '#/components/schemas/UserContact'
        commentData:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: integer
          format: int64
          description: Creation timestamp in milliseconds
        lastUpdated:
          type: integer
          format: int64
          description: Last update timestamp in milliseconds
    
    Comment:
      type: object
      properties:
        commentId:
          type: integer
          description: Unique identifier for the comment
          example: 12345
        commentText:
          type: string
          description: Plain text content of the comment
          example: Sample Comment with {{userId}} tagged
        commentHtml:
          type: string
          description: HTML content of the comment
          example: <div>Sample Comment</div>
        from:
          $ref: '#/components/schemas/UserContact'
        context:
          type: object
          description: Custom key/value metadata
          additionalProperties: true
        isCommentResolverUsed:
          type: boolean
          description: Use for self-hosting comments data
          example: false
        isCommentTextAvailable:
          type: boolean
          description: Use for self-hosting comments data
          example: true
        triggerNotification:
          type: boolean
          description: When enabled, triggers in-app notifications, email notifications, and webhooks
          default: false
        createdAt:
          type: integer
          format: int64
          description: Creation timestamp in milliseconds
        lastUpdated:
          type: integer
          format: int64
          description: Last update timestamp in milliseconds
        taggedUserContacts:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              contact:
                $ref: '#/components/schemas/UserContact'
    
    UserContact:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: User ID
          example: yourUserId
        name:
          type: string
          description: User name
          example: User Name
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
    
    Notification:
      type: object
      properties:
        notificationId:
          type: string
          description: Custom notification ID
        displayHeadlineMessageTemplate:
          type: string
          description: Template for headline message with variables in curly brackets
        displayHeadlineMessageTemplateData:
          type: object
          description: Data to replace template variables
          additionalProperties: true
        displayBodyMessage:
          type: string
          description: Body message (secondary message)
        actionUser:
          $ref: '#/components/schemas/UserContact'
        notifyUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserContact'
        notifyAll:
          type: boolean
          description: If true, notification will be sent to all users in the organization
          default: true
        verifyUserPermissions:
          type: boolean
          description: When enabled, notifications are only created for users with document access
          default: false
        notificationSourceData:
          type: object
          description: Custom object stored with the notification
          additionalProperties: true
    
    NotificationConfig:
      type: object
      properties:
        inbox:
          type: string
          enum: [ALL, MENTIONS_ONLY, NONE]
          description: Inbox notification settings
          example: ALL
        email:
          type: string
          enum: [ALL, MENTIONS_ONLY, NONE]
          description: Email notification settings
          example: ALL
        slack:
          type: string
          enum: [ALL, MENTIONS_ONLY, NONE]
          description: Slack notification settings
          example: MENTIONS_ONLY
    
    LiveStateData:
      type: object
      required:
        - organizationId
        - documentId
        - liveStateDataId
      properties:
        organizationId:
          type: string
          description: Organization ID
        documentId:
          type: string
          description: Document ID
        liveStateDataId:
          type: string
          description: Unique identifier for the live state data
        data:
          type: object
          description: Any valid serializable JSON object
          additionalProperties: true
        merge:
          type: boolean
          description: If true, merges new data with existing data instead of replacing
          default: false
    
    UserGroup:
      type: object
      required:
        - groupId
        - groupName
      properties:
        groupId:
          type: string
          description: Unique identifier for the group
          example: engineering
        groupName:
          type: string
          description: Display name of the group
          example: Engineering

paths:
  /organizations/add:
    post:
      summary: Add Organizations
      description: Use this API to add new organizations and its metadata. If an organization already exists, this will update its metadata.
      operationId: addOrganizations
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizations
                  properties:
                    organizations:
                      type: array
                      items:
                        $ref: '#/components/schemas/Organization'
            example:
              data:
                organizations:
                  - organizationId: yourOrganizationId
                    organizationName: Your Organization Name
      responses:
        '200':
          description: Organizations added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        example: success
                      message:
                        type: string
                        example: Organization(s) added successfully.
                      data:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            success:
                              type: boolean
                            id:
                              type: string
                            message:
                              type: string
              example:
                result:
                  status: success
                  message: Organization(s) added successfully.
                  data:
                    yourOrganizationId:
                      success: true
                      id: "02cf91e5e7a5f4c0b600c84cf248384b"
                      message: Added Successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/get:
    post:
      summary: Get Organizations
      description: |
        Use this API to retrieve specific organizations by organization IDs.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
      operationId: getOrganizations
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  properties:
                    organizationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Organization IDs (max 30). If not provided, returns all organizations.
                      example: [yourOrganizationId]
                    pageSize:
                      type: integer
                      default: 1000
                      description: Number of items per page
                      example: 1000
                    pageToken:
                      type: string
                      description: Page token from previous API call
                      example: pageToken
            example:
              data:
                organizationIds: [yourOrganizationId]
                pageSize: 1000
                pageToken: pageToken
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Organization'
                      nextPageToken:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/update:
    post:
      summary: Update Organizations
      description: Use this API to update existing organization(s) metadata.
      operationId: updateOrganizations
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizations
                  properties:
                    organizations:
                      type: array
                      items:
                        $ref: '#/components/schemas/Organization'
            example:
              data:
                organizations:
                  - organizationId: yourOrganizationId
                    organizationName: Your Updated Organization Name
      responses:
        '200':
          description: Organizations updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/delete:
    post:
      summary: Delete Organizations
      description: Use this API to delete specific organization(s) data by their IDs.
      operationId: deleteOrganizations
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationIds
                  properties:
                    organizationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Organization IDs to delete
                      example: [yourOrganizationId1, yourOrganizationId2]
            example:
              data:
                organizationIds: [yourOrganizationId1, yourOrganizationId2]
      responses:
        '200':
          description: Organizations deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/access/disablestate/update:
    post:
      summary: Update Disabled State for Organizations
      description: |
        Use this API to enable or disable both read and write access for all documents for all users.
        
        Use case: Disable access when a customer's trial or subscription has ended.
      operationId: updateOrganizationDisabledState
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationIds
                    - disabled
                  properties:
                    organizationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Organization IDs
                      example: [yourOrganizationId1, yourOrganizationId2]
                    disabled:
                      type: boolean
                      description: Whether to disable read and write access
                      example: true
            example:
              data:
                organizationIds: [yourOrganizationId1, yourOrganizationId2]
                disabled: true
      responses:
        '200':
          description: Disabled state updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/add:
    post:
      summary: Add Users
      description: |
        Use this API to add Users to organizations, folders, or documents.
        
        - **Organization:** Provides access to all documents unless they have restricted access
        - **Folder:** Provides access to all documents in the folder (pass folderId)
        - **Document:** Provides access to the specific document (pass documentId)
        
        **Access Control:**
        Set `accessRole` to `viewer` (read-only) or `editor` (read/write) for each resource.
      operationId: addUsers
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - users
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                      example: yourOrganizationId
                    createOrganization:
                      type: boolean
                      description: If true, creates organization if it doesn't exist
                    documentId:
                      type: string
                      description: Document ID (optional, for document-level access)
                      example: yourDocumentId
                    createDocument:
                      type: boolean
                      description: If true, creates document if it doesn't exist
                    folderId:
                      type: string
                      description: Folder ID (optional, for folder-level access)
                      example: yourFolderId
                    createFolder:
                      type: boolean
                      description: If true, creates folder if it doesn't exist
                    users:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
            examples:
              organizationEditor:
                summary: Add editor to organization
                value:
                  data:
                    organizationId: yourOrganizationId
                    users:
                      - userId: yourUserId1
                        name: User Name
                        email: user@email.com
                        accessRole: editor
              documentViewer:
                summary: Add viewer to document
                value:
                  data:
                    organizationId: yourOrganizationId
                    documentId: yourDocumentId
                    users:
                      - userId: yourUserId1
                        name: User Name
                        email: user@email.com
                        accessRole: viewer
      responses:
        '200':
          description: Users processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            success:
                              type: boolean
                            id:
                              type: string
                            message:
                              type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/get:
    post:
      summary: Get Users
      description: |
        Use this API to retrieve users based on various filters such as organization ID, document ID, folder ID, organization user group IDs or user IDs.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
      operationId: getUsers
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    folderId:
                      type: string
                      description: Folder ID
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (max 30)
                    organizationUserGroupIds:
                      type: array
                      items:
                        type: string
                      description: Array of Organization User Group IDs (max 30)
                    allDocuments:
                      type: boolean
                      description: If true, retrieves all document users within the organization
                    groupByDocumentId:
                      type: boolean
                      description: If true, response is grouped by document ID (works with allDocuments)
                    pageSize:
                      type: integer
                      default: 1000
                      description: Number of items per page
                    pageToken:
                      type: string
                      description: Page token from previous API call
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        oneOf:
                          - type: array
                            items:
                              $ref: '#/components/schemas/User'
                          - type: object
                            additionalProperties:
                              type: array
                              items:
                                $ref: '#/components/schemas/User'
                      nextPageToken:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/update:
    post:
      summary: Update Users
      description: |
        Use this API to update user metadata based on various filters such as organization ID, document ID, folder ID and user IDs.
        
        **Access Control:**
        Set `accessRole` to `viewer` (read-only) or `editor` (read/write) for each resource.
      operationId: updateUsers
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - users
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    folderId:
                      type: string
                      description: Folder ID
                    users:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Users updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/delete:
    post:
      summary: Delete Users
      description: |
        Use this API to remove Users from organizations or documents.
        
        - **Organization:** Removes access from all documents and data
        - **Document:** Removes access from specified document (pass documentId)
        - **Folder:** Removes access from specified folder (pass folderId)
      operationId: deleteUsers
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - userIds
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID (optional)
                    folderId:
                      type: string
                      description: Folder ID (optional)
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs to delete
      responses:
        '200':
          description: Users deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/add:
    post:
      summary: Add Documents
      description: Use this API to add documents with metadata to an organization.
      operationId: addDocuments
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documents
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    createOrganization:
                      type: boolean
                      description: If true, creates organization if it doesn't exist
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/Document'
                    folderId:
                      type: string
                      description: Folder ID to add documents to
                    createFolder:
                      type: boolean
                      description: If true, creates folder if it doesn't exist
      responses:
        '200':
          description: Documents added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/get:
    post:
      summary: Get Documents
      description: |
        Use this API to retrieve specific documents or all documents from an organization.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
      operationId: getDocuments
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs (max 30)
                    folderId:
                      type: string
                      description: Filters documents by folder ID
                    pageSize:
                      type: integer
                      default: 1000
                      description: Number of items per page
                    pageToken:
                      type: string
                      description: Page token from previous API call
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Document'
                      pageToken:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/update:
    post:
      summary: Update Documents
      description: Use this API to update metadata of documents within an organization.
      operationId: updateDocuments
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documents
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documents:
                      type: array
                      items:
                        $ref: '#/components/schemas/Document'
      responses:
        '200':
          description: Documents updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/delete:
    post:
      summary: Delete Documents
      description: |
        Use this API to delete specific documents from an organization.
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/documents/delete-documents
      operationId: deleteDocuments
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentIds
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs to delete
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId1, yourDocumentId2]
      responses:
        '200':
          description: Documents deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/move:
    post:
      summary: Move Documents
      description: |
        Use this API to move documents to a different folder within an organization.
        
        **Key Points:**
        - Can move up to 30 documents at a time
        - Documents are moved to the specified folder ID
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/documents/move-documents
      operationId: moveDocuments
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentIds
                    - folderId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of Document IDs (max 30)
                    folderId:
                      type: string
                      description: Target folder ID
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId1, yourDocumentId2]
                folderId: targetFolderId
      responses:
        '200':
          description: Documents moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/access/update:
    post:
      summary: Update Access for Documents
      description: |
        Use this API to update the access type for a single or multiple documents at once.
        
        **Key Points:**
        - Access types: `organizationPrivate`, `restricted`, `public`
        - You can update the default access type for all documents in the Velt Console
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/documents/update-document-access
      operationId: updateDocumentAccess
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentIds
                    - accessType
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs
                    accessType:
                      type: string
                      enum: [organizationPrivate, restricted, public]
                      description: Access type for the documents
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId1, yourDocumentId2]
                accessType: organizationPrivate
      responses:
        '200':
          description: Document access updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/documents/access/disablestate/update:
    post:
      summary: Update Disabled State for Documents
      description: |
        Use this API to enable or disable both read and write access for all users.
        
        **Use Case:**
        - When a customer's trial or subscription has ended and you want to disable their access to the Velt data, you could use this to disable access to specific documents.
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/documents/update-document-disable-state
      operationId: updateDocumentDisabledState
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentIds
                    - disabled
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs
                    disabled:
                      type: boolean
                      description: Whether to disable read and write access
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId]
                disabled: true
      responses:
        '200':
          description: Document disabled state updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/folders/add:
    post:
      summary: Add Folder
      description: |
        Use this API to create a new folder in an organization.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
      operationId: addFolder
      tags:
        - Folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - folders
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    createOrganization:
                      type: boolean
                      description: If true, creates organization if it doesn't exist
                    folders:
                      type: array
                      items:
                        $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/folders/get:
    post:
      summary: Get Folders
      description: |
        Use this API to retrieve the given folder's metadata and its subfolders. You can retrieve nested subfolders at any depth level using the `maxDepth` parameter. The response includes an `ancestors` array showing the parent hierarchy and an `inheritAccessFromParent` field indicating whether access is inherited.
        
        **Optional Parameters:**
        - `folderId`: Folder ID to retrieve a specific folder and its subfolders. If not provided, all folders in the organization will be retrieved.
        - `maxDepth`: Maximum depth level for retrieving nested subfolders. If not provided, only immediate subfolders are retrieved.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/folders/get-folders
      operationId: getFolders
      tags:
        - Folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    folderId:
                      type: string
                      description: Folder ID (optional). If not provided, returns all folders.
                    maxDepth:
                      type: integer
                      description: Maximum depth level for retrieving nested subfolders
      responses:
        '200':
          description: Folders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Folder'
                            - type: object
                              properties:
                                subFolders:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/Folder'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/folders/update:
    post:
      summary: Update Folder
      description: |
        Use this API to:
        1. Update metadata of a folder within an organization.
        2. Move a folder and its contents to a different parent folder.
        
        **Key Points:**
        - When moving a folder to a different parent by updating the `parentFolderId`, the API automatically updates the folder's `ancestors` array and `accessType`, and propagates these changes to all subfolders within the moved folder.
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/folders/update-folder
      operationId: updateFolder
      tags:
        - Folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - folders
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    folders:
                      type: array
                      items:
                        type: object
                        required:
                          - folderId
                        properties:
                          folderId:
                            type: string
                            description: Unique identifier for the folder
                          folderName:
                            type: string
                            description: Name of the folder
                          parentFolderId:
                            type: string
                            description: ID of the parent folder
            example:
              data:
                organizationId: yourOrganizationId
                folders:
                  - folderId: yourFolderId
                    folderName: yourFolderName
                    parentFolderId: yourParentFolderId
      responses:
        '200':
          description: Folder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/folders/delete:
    post:
      summary: Delete Folder
      description: |
        Delete a folder and all its contents (documents and subfolders).
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/folders/delete-folder
      operationId: deleteFolder
      tags:
        - Folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - folderId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    folderId:
                      type: string
                      description: Folder ID
            example:
              data:
                organizationId: yourOrganizationId
                folderId: yourFolderId
      responses:
        '200':
          description: Folder deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/folders/access/update:
    post:
      summary: Update Access for Folders
      description: |
        Use this API to update the access type for a single or multiple folders at once.
        
        **Key Points:**
        - Access types: `organizationPrivate`, `restricted`, `public`
        - Use `inheritFromParent` to configure the folder to inherit access permissions from its parent folder
        - You can update the default access type for all folders in the Velt Console
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/folders/update-folder-access
      operationId: updateFolderAccess
      tags:
        - Folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - folderIds
                    - accessType
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    folderIds:
                      type: array
                      items:
                        type: string
                      description: Array of Folder IDs
                    accessType:
                      type: string
                      enum: [organizationPrivate, restricted, public]
                      description: Access type for the folders
                    inheritFromParent:
                      type: boolean
                      description: Configure folder to inherit access permissions from parent
            example:
              data:
                organizationId: yourOrganizationId
                folderIds: [yourFolderId1, yourFolderId2]
                accessType: organizationPrivate
                inheritFromParent: true
      responses:
        '200':
          description: Folder access updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/generate_token:
    post:
      summary: Generate Token
      description: |
        Use this API to generate authentication JWT token for users to access Velt features. The token contains user information and permissions for specific resources.
        
        - JWT token expires in 48 hours
        - Can specify permissions for different resource types (organization, folder, document)
        
        **Access Control:**
        Set `accessRole` to `viewer` (read-only) or `editor` (read/write) for each resource.
      operationId: generateToken
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - userProperties
                - permissions
              properties:
                userId:
                  type: string
                  description: Unique identifier for the user
                  example: user123
                userProperties:
                  type: object
                  required:
                    - name
                    - email
                  properties:
                    isAdmin:
                      type: boolean
                      description: Whether the user has admin privileges
                      default: false
                    name:
                      type: string
                      description: Display name of the user
                      example: John Doe
                    email:
                      type: string
                      format: email
                      description: Email address of the user
                      example: john@example.com
                permissions:
                  type: object
                  required:
                    - resources
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Resource'
            examples:
              orgAndDoc:
                summary: Organization viewer and document editor
                value:
                  userId: user123
                  userProperties:
                    isAdmin: false
                    name: John Doe
                    email: john@example.com
                  permissions:
                    resources:
                      - type: organization
                        id: org_123
                        accessRole: viewer
                      - type: document
                        id: doc_456
                        organizationId: org_123
                        accessRole: editor
                        expiresAt: 1640995200
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: JWT token
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/permissions/add:
    post:
      summary: Add Permissions
      description: |
        Use this API to add permissions to a user for various resources like organizations, folders, documents, etc.
        
        - Can add permissions for multiple resources in a single API call
        - The `expiresAt` field is optional
        
        **Access Control:**
        Set `accessRole` to `viewer` (read-only) or `editor` (read/write) for each resource.
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/auth/add-permissions
      operationId: addPermissions
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - user
                    - permissions
                  properties:
                    user:
                      type: object
                      required:
                        - userId
                      properties:
                        userId:
                          type: string
                          description: The ID of the user to add permissions to
                    permissions:
                      type: object
                      required:
                        - resources
                      properties:
                        resources:
                          type: array
                          items:
                            $ref: '#/components/schemas/Resource'
            example:
              data:
                user:
                  userId: some-user-id
                permissions:
                  resources:
                    - type: organization
                      id: YOUR_ORGANIZATION_ID
                      accessRole: editor
      responses:
        '200':
          description: Permissions added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/generate_signature:
    post:
      summary: Generate Signature
      description: |
        Use this API to generate a secure signature for Permission Provider responses. The signature validates the integrity of permission decisions returned from your authorization service.
        
        **Security Critical:**
        This endpoint must be called from your backend server, never from client-side code. The signature ensures that permission responses haven't been tampered with.
        
        **Use Case:**
        This API is used in conjunction with the Permission Provider configuration mode. When your `onResourceAccessRequired` function is called, use this endpoint to generate a secure signature for your permission response.
        
        **Key Points:**
        - Each permission object must include userId, resourceId, type, and hasAccess
        - For document resources, can specify `accessRole`: `viewer` or `editor`
        - Optional `expiresAt` timestamp (in milliseconds) for time-limited permissions
        - Resource types: `document`, `folder`, or `organization`
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/auth/generate-signature
      operationId: generateSignature
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - permissions
                  properties:
                    permissions:
                      type: array
                      items:
                        $ref: '#/components/schemas/PermissionData'
            examples:
              documentViewer:
                summary: Document access with viewer role and expiration
                value:
                  data:
                    permissions:
                      - userId: user123
                        resourceId: document456
                        type: document
                        hasAccess: true
                        accessRole: viewer
                        expiresAt: 1759745729823
              multipleResources:
                summary: Multiple resources (organization and folder)
                value:
                  data:
                    permissions:
                      - userId: user123
                        resourceId: org789
                        type: organization
                        hasAccess: true
                      - userId: user123
                        resourceId: folder101
                        type: folder
                        hasAccess: true
              denyAccess:
                summary: Denying access
                value:
                  data:
                    permissions:
                      - userId: user456
                        resourceId: document789
                        type: document
                        hasAccess: false
      responses:
        '200':
          description: Signature generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        example: success
                      message:
                        type: string
                        example: Signature generated successfully.
                      data:
                        type: object
                        properties:
                          signature:
                            type: string
                            example: a1b2c3d4e5f67890abcdef1234567890
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/permissions/get:
    post:
      summary: Get Permissions
      description: |
        Use this API to retrieve permissions for specific users within an organization.
        
        **Key Points:**
        - Get permissions for specific documents or folders
        - Filter by user IDs
        - Returns access roles and resource permissions
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/auth/get-permissions
      operationId: getPermissions
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId]
                userIds: [yourUserId]
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/permissions/remove:
    post:
      summary: Remove Permissions
      description: |
        Use this API to remove permissions from a user for specific resources.
        
        **Key Points:**
        - Revoke user access to organizations, folders, or documents
        - Can remove multiple resource permissions in a single API call
        - User will lose access to the specified resources
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/auth/remove-permissions
      operationId: removePermissions
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - userId
                    - permissions
                  properties:
                    userId:
                      type: string
                      description: User ID
                    permissions:
                      type: object
                      required:
                        - resources
                      properties:
                        resources:
                          type: array
                          items:
                            type: object
                            required:
                              - type
                              - id
                            properties:
                              type:
                                type: string
                                enum: [organization, document, folder]
                                description: Resource type
                              id:
                                type: string
                                description: Resource ID
                              organizationId:
                                type: string
                                description: Organization ID (required for document/folder)
            example:
              data:
                userId: USER_ID
                permissions:
                  resources:
                    - type: organization
                      id: ORGANIZATION_ID
                    - type: document
                      id: DOCUMENT_ID
                      organizationId: ORGANIZATION_ID
      responses:
        '200':
          description: Permissions removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/add:
    post:
      summary: Add Notifications
      description: |
        Use this API to add notifications.
        
        **Key Points:**
        - Send custom notifications to users via inbox, email, and other channels
        - Support for template variables in headline messages
        - Can notify specific users or all users in organization
        
        **Optional Parameters:**
        - `verifyUserPermissions`: When enabled, notifications are only created for users who have access to the specified document (default: false)
        - `notificationId`: Custom notification ID to prevent duplicate notifications. Only special characters `_`, `-` are allowed
        - `notifyAll`: If set to true, notification will be sent to all users in the organization (default: true)
        - `notificationSourceData`: Any custom object to be stored with the notification. When the user clicks on the notification, this data will be sent in the callback
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/add-notifications
      operationId: addNotifications
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - actionUser
                    - displayHeadlineMessageTemplate
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    actionUser:
                      $ref: '#/components/schemas/UserContact'
                    verifyUserPermissions:
                      type: boolean
                      default: false
                      description: When enabled, notifications are only created for users with document access
                    notificationId:
                      type: string
                      description: Custom notification ID
                    displayHeadlineMessageTemplate:
                      type: string
                      description: Template for headline message with variables in curly brackets
                    displayHeadlineMessageTemplateData:
                      type: object
                      description: Data to replace template variables
                      additionalProperties: true
                    displayBodyMessage:
                      type: string
                      description: Body message (secondary message)
                    notifyUsers:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserContact'
                      description: Array of users to notify
                    notifyAll:
                      type: boolean
                      default: true
                      description: If true, notification will be sent to all users
                    notificationSourceData:
                      type: object
                      description: Custom object stored with the notification
                      additionalProperties: true
      responses:
        '200':
          description: Notifications added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/get:
    post:
      summary: Get Notifications
      description: |
        Use this API to retrieve notifications for a specific document within an organization.
        
        **Key Points:**
        - Supports pagination with `pageSize` and `pageToken`
        - Returns all notifications for the specified document
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/get-notifications-v2
      operationId: getNotifications
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID (either this or userId)
                    locationId:
                      type: string
                      description: Location ID
                    userId:
                      type: string
                      description: User ID (either this or documentId)
                    notificationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Notification IDs (max 30)
                    pageSize:
                      type: integer
                      default: 1000
                      description: Number of items per page
                    pageToken:
                      type: string
                      description: Page token from previous API call
                    order:
                      type: string
                      enum: [asc, desc]
                      default: desc
                      description: Order of notifications based on timestamp
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: array
                        items:
                          type: object
                      pageToken:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/update:
    post:
      summary: Update Notifications
      description: |
        Use this API to update existing notifications.
        
        **Key Points:**
        - Can update notification content and metadata
        - Specify which notifications to update using the notifications array with IDs
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/update-notifications
      operationId: updateNotifications
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - notifications
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    locationId:
                      type: string
                      description: Location ID (optional)
                    userId:
                      type: string
                      description: User ID (optional)
                    notifications:
                      type: array
                      items:
                        type: object
                        required:
                          - id
                        properties:
                          id:
                            type: string
                            description: Notification ID
                          displayBodyMessage:
                            type: string
                            description: Updated body message
      responses:
        '200':
          description: Notifications updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/delete:
    post:
      summary: Delete Notifications
      description: |
        Use this API to delete specific notifications.
        
        **Key Points:**
        - Permanently remove notifications from the system
        - Specify which notifications to delete using notification IDs
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/delete-notifications
      operationId: deleteNotifications
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - notifications
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    userId:
                      type: string
                      description: User ID (optional)
                    notifications:
                      type: array
                      items:
                        type: object
                        required:
                          - id
                        properties:
                          id:
                            type: string
                            description: Notification ID
      responses:
        '200':
          description: Notifications deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/config/set:
    post:
      summary: Set Config
      description: |
        Use this API to configure notification channels for specific users and documents.
        
        **Key Points:**
        - Set notification preferences for inbox, email, and Slack channels
        - Options: `ALL`, `MENTIONS_ONLY`, or `NONE`
        - Can configure per user and per document
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/set-config
      operationId: setNotificationConfig
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - config
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs (optional)
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (optional)
                    config:
                      $ref: '#/components/schemas/NotificationConfig'
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId]
                userIds: [yourUserId]
                config:
                  inbox: ALL
                  email: ALL
                  slack: MENTIONS_ONLY
      responses:
        '200':
          description: Configuration set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/config/get:
    post:
      summary: Get Config
      description: |
        Use this API to retrieve notification configuration settings for specific users and documents.
        
        **Key Points:**
        - Get current notification preferences for a user
        - Returns settings for inbox, email, and other notification channels
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/notifications/get-config
      operationId: getNotificationConfig
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - userId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      description: Array of Document IDs (optional)
                    userId:
                      type: string
                      description: User ID
            example:
              data:
                organizationId: yourOrganizationId
                documentIds: [yourDocumentId]
                userId: yourUserId
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/usergroups/add:
    post:
      summary: Add User Groups
      description: |
        Use this API to add organization user groups to a specific organization.
        
        **Optional Parameters:**
        - `createOrganization`: If set to true, a new organization will be created (if it doesn't exist) before the group(s) are created
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/user-groups/add-groups
      operationId: addUserGroups
      tags:
        - User Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - organizationUserGroups
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    createOrganization:
                      type: boolean
                      description: If true, creates organization if it doesn't exist
                    organizationUserGroups:
                      type: array
                      items:
                        $ref: '#/components/schemas/UserGroup'
            example:
              data:
                organizationId: yourOrganizationId
                organizationUserGroups:
                  - groupId: engineering
                    groupName: Engineering
      responses:
        '200':
          description: User groups added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/usergroups/users/add:
    post:
      summary: Add Users to Groups
      description: |
        Use this API to add users to a specific organization user group.
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/user-groups/add-users-to-group
      operationId: addUsersToGroups
      tags:
        - User Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - organizationUserGroupId
                    - userIds
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    organizationUserGroupId:
                      type: string
                      description: Organization User Group ID
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs
            example:
              data:
                organizationId: yourOrganizationId
                organizationUserGroupId: yourGroupId
                userIds: [yourUserId1]
      responses:
        '200':
          description: Users added to group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/usergroups/users/delete:
    post:
      summary: Delete Users from Groups
      description: |
        Use this API to delete users from a specific organization user group.
        
        **Optional Parameters:**
        - `deleteAll`: If true, all users in the group will be deleted
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/user-groups/delete-users-from-group
      operationId: deleteUsersFromGroups
      tags:
        - User Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - organizationUserGroupId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    organizationUserGroupId:
                      type: string
                      description: Organization User Group ID
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (optional if deleteAll is true)
                    deleteAll:
                      type: boolean
                      description: If true, all users in the group will be deleted
            example:
              data:
                organizationId: yourOrganizationId
                organizationUserGroupId: yourGroupId
                userIds: [yourUserId1]
      responses:
        '200':
          description: Users deleted from group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/add:
    post:
      summary: Add Comment Annotations
      description: |
        Use this API to add comment annotations to a document within an organization.
        - You can add comments on an element, text or page.
        - You can provide HTML or text content.
        - Additional filters can be applied using location IDs.
        
        **Optional Parameters for commentAnnotations:**
        - `annotationId`: Custom Annotation ID. If not provided, Velt will generate a unique ID
        
        **Optional Parameters for commentData:**
        - `commentId`: Custom Comment ID. If not provided, Velt will generate a unique ID
        - `context`: Custom key/value metadata object for storing additional information
        - `isCommentResolverUsed`: Use for self-hosting comments data
        - `isCommentTextAvailable`: Use for self-hosting comments data
        - `triggerNotification`: When enabled, triggers in-app notifications, email notifications, and webhooks (default: false)
        - `createdAt`: Created At timestamp (in milliseconds since epoch)
        - `lastUpdated`: Last Updated timestamp (in milliseconds since epoch)
        - `taggedUserContacts`: Array of tagged user contacts for replacing {{userId}} in commentText
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comment-annotations/add-comment-annotations
      operationId: addCommentAnnotations
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - commentAnnotations
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    commentAnnotations:
                      type: array
                      items:
                        $ref: '#/components/schemas/CommentAnnotation'
      responses:
        '200':
          description: Comment annotations added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/get:
    post:
      summary: Get Comment Annotations
      description: |
        Use this API to retrieve comment annotations from a document within an organization. Additional filters can be applied using location IDs, annotation IDs, or user IDs.
        
        **Filtering Options:**
        - `documentId`: Single document ID
        - `documentIds`: Array of Document IDs (Limit: Only 30 IDs at a time)
        - `groupByDocumentId`: Data will be grouped by document ID
        - `folderId`: Folder ID to filter annotations by the folder
        - `locationIds`: Array of Location IDs (Limit: Only 30 IDs at a time)
        - `annotationIds`: Array of Annotation IDs (Limit: Only 30 IDs at a time)
        - `userIds`: Array of User IDs (Limit: Only 30 IDs at a time)
        - `statusIds`: Status IDs of the annotations to filter on
        - `updatedAfter`/`updatedBefore`: Filter by lastUpdated timestamp (milliseconds)
        - `createdAfter`/`createdBefore`: Filter by createdAt timestamp (milliseconds)
        - Supports pagination with `pageSize` and `pageToken`
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comment-annotations/get-comment-annotations-v2
      operationId: getCommentAnnotations
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID (optional)
                    documentIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of Document IDs (max 30)
                    groupByDocumentId:
                      type: boolean
                      description: Group results by document ID
                    folderId:
                      type: string
                      description: Folder ID
                    locationIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of Location IDs (max 30)
                    annotationIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of Annotation IDs (max 30)
                    userIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of User IDs (max 30)
                    statusIds:
                      type: array
                      items:
                        type: string
                      description: Status IDs to filter on
                    updatedAfter:
                      type: integer
                      format: int64
                      description: Filter by lastUpdated after timestamp (milliseconds)
                    updatedBefore:
                      type: integer
                      format: int64
                      description: Filter by lastUpdated before timestamp (milliseconds)
                    createdAfter:
                      type: integer
                      format: int64
                      description: Filter by createdAt after timestamp (milliseconds)
                    createdBefore:
                      type: integer
                      format: int64
                      description: Filter by createdAt before timestamp (milliseconds)
                    pageSize:
                      type: integer
                      default: 1000
                      description: Number of items per page
                    pageToken:
                      type: string
                      description: Page token from previous API call
      responses:
        '200':
          description: Comment annotations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        oneOf:
                          - type: array
                            items:
                              $ref: '#/components/schemas/CommentAnnotation'
                          - type: object
                            additionalProperties:
                              type: array
                              items:
                                $ref: '#/components/schemas/CommentAnnotation'
                      nextPageToken:
                        type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/update:
    post:
      summary: Update Comment Annotations
      description: |
        Use this API to update comment annotations in a document within an organization. Additional filters can be applied using location IDs, annotation IDs, or user IDs.
        
        **Key Points:**
        - Can update annotation metadata such as status, location, targetElement, priority, assignee, and more
        - Supports filtering by locationIds, annotationIds, and userIds
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comment-annotations/update-comment-annotations
      operationId: updateCommentAnnotations
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - updatedData
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    locationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Location IDs (optional)
                    annotationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Annotation IDs (optional)
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (optional)
                    updatedData:
                      type: object
                      description: Data to update
                      properties:
                        status:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: [default, ongoing]
      responses:
        '200':
          description: Comment annotations updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/delete:
    post:
      summary: Delete Comment Annotations
      description: |
        Use this API to delete comment annotations from a document within an organization. Additional filters can be applied using location IDs, annotation IDs, or user IDs.
        
        **Filtering Options:**
        - `locationIds`: Array of Location IDs
        - `annotationIds`: Array of Annotation IDs
        - `userIds`: Array of User IDs
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comment-annotations/delete-comment-annotations
      operationId: deleteCommentAnnotations
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    locationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Location IDs (optional)
                    annotationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Annotation IDs (optional)
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (optional)
      responses:
        '200':
          description: Comment annotations deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/count/get:
    post:
      summary: Get Comment Annotations Count
      description: |
        Use this API to retrieve the count of comment annotations for specified documents, including both total and unread counts.
        
        **Key Points:**
        - Limit: Only 30 document IDs can be passed at a time
        - Can filter by status IDs
        - Returns total and unread counts per document
        
        **Requirements:**
        - Enable advanced queries option in the Velt Console
        - Deploy v4 series of the Velt SDK
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comment-annotations/get-comment-count-v2
      operationId: getCommentAnnotationsCount
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentIds
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentIds:
                      type: array
                      items:
                        type: string
                      maxItems: 30
                      description: Array of Document IDs (max 30)
                    userId:
                      type: string
                      description: User ID (optional)
                    statusIds:
                      type: array
                      items:
                        type: string
                      description: Status IDs to filter on (optional)
      responses:
        '200':
          description: Comment annotations count retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/comments/add:
    post:
      summary: Add Comments
      description: |
        Use this API to add new comments to an existing comment annotation.
        
        **Key Points:**
        - Add one or multiple comments to an annotation thread
        - Supports both text and HTML content
        - Can include user mentions, metadata, and trigger notifications
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comments/add-comments
      operationId: addComments
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - annotationId
                    - commentData
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    annotationId:
                      type: string
                      description: Annotation ID
                    createOrganization:
                      type: object
                      description: Organization creation settings
                      properties:
                        organizationName:
                          type: string
                        organizationType:
                          type: string
                    createDocument:
                      type: object
                      description: Document creation settings
                      properties:
                        documentName:
                          type: string
                        documentType:
                          type: string
                    commentData:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comments added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/comments/get:
    post:
      summary: Get Comments
      description: |
        Use this API to retrieve comments from a specific comment annotation.
        
        **Filtering Options:**
        - `userIds`: Array of User IDs (optional)
        - `commentIds`: Array of Comment IDs (optional)
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comments/get-comments
      operationId: getComments
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - annotationId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    annotationId:
                      type: string
                      description: Annotation ID
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs (optional)
                    commentIds:
                      type: array
                      items:
                        type: integer
                      description: Array of Comment IDs (optional)
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/comments/update:
    post:
      summary: Update Comments
      description: |
        Use this API to update specific comments within a comment annotation.
        
        **Key Points:**
        - Can update commentText, commentHtml, and other comment properties
        - Specify which comments to update using commentIds array
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comments/update-comments
      operationId: updateComments
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - annotationId
                    - commentIds
                    - updatedData
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    annotationId:
                      type: string
                      description: Annotation ID
                    commentIds:
                      type: array
                      items:
                        type: integer
                      description: Array of Comment IDs to update
                    updatedData:
                      type: object
                      properties:
                        commentText:
                          type: string
                          description: Updated comment text
                        commentHtml:
                          type: string
                          description: Updated comment HTML
            example:
              data:
                organizationId: yourOrganizationId
                documentId: yourDocumentId
                annotationId: yourAnnotationId
                commentIds: [153783, 607395]
                updatedData:
                  commentText: Sample Updated Comment
                  commentHtml: <div>Hello Updated</div>
      responses:
        '200':
          description: Comments updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /commentannotations/comments/delete:
    post:
      summary: Delete Comments
      description: |
        Use this API to delete specific comments from a comment annotation.
        
        **Key Points:**
        - Specify which comments to delete using commentIds array
        - Comments are permanently removed from the annotation thread
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/comments-feature/comments/delete-comments
      operationId: deleteComments
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - documentId
                    - annotationId
                    - commentIds
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    documentId:
                      type: string
                      description: Document ID
                    annotationId:
                      type: string
                      description: Annotation ID
                    commentIds:
                      type: array
                      items:
                        type: integer
                      description: Array of Comment IDs to delete
            example:
              data:
                organizationId: yourOrganizationId
                documentId: yourDocumentId
                annotationId: yourAnnotationId
                commentIds: [153783, 607395]
      responses:
        '200':
          description: Comments deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /workspace/domains/add:
    post:
      summary: Add Domains
      description: |
        Use this API to whitelist domains for your workspace.
        
        **Key Points:**
        - Control which domains can access your Velt workspace
        - Supports wildcard patterns (e.g., `https://*.example.com`)
        - Improves security by restricting access to approved domains
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/workspace/add-domain
      operationId: addDomains
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - domains
                  properties:
                    domains:
                      type: array
                      items:
                        type: string
                      description: Array of domain URLs to whitelist
            example:
              data:
                domains:
                  - https://www.google.com
                  - https://*.firebase.com
      responses:
        '200':
          description: Domains added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /workspace/domains/delete:
    post:
      summary: Delete Domains
      description: |
        Use this API to remove domains from your workspace whitelist.
        
        **Key Points:**
        - Remove previously whitelisted domains
        - Access from removed domains will be blocked
        - Can remove multiple domains in a single request
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/workspace/delete-domain
      operationId: deleteDomains
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - domains
                  properties:
                    domains:
                      type: array
                      items:
                        type: string
                      description: Array of domain URLs to remove
            example:
              data:
                domains:
                  - https://www.google.com
                  - https://*.firebase.com
      responses:
        '200':
          description: Domains deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /livestate/broadcast:
    post:
      summary: Broadcast Event
      description: |
        Use this API to broadcast live state events to any document. Use it with the Live State feature.
        
        **Key Points:**
        - Broadcast real-time state changes and events to all connected users
        - Can be any valid serializable JSON object
        - `merge`: If true, merges the new data with existing data instead of replacing it (default: false)
        
        **Use Cases:**
        - Sync application state across users
        - Broadcast custom events
        - Share real-time data updates
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/livestate/broadcast-event
      operationId: broadcastEvent
      tags:
        - Livestate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/LiveStateData'
            example:
              data:
                organizationId: YOUR_ORGANIZATION_ID
                documentId: YOUR_DOCUMENT_ID
                liveStateDataId: sample_live_state_data_id
                data:
                  status: active
                  message: Hello World
                  customField: custom value
                merge: true
      responses:
        '200':
          description: Event broadcasted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/data/get:
    post:
      summary: Get All User Data (GDPR)
      description: |
        Use this API to export all data for a specific user (GDPR compliance).
        
        **Key Points:**
        - Returns all user data including comments, annotations, and other collaboration data
        - Supports pagination with `pageToken`
        - Used for GDPR data portability requests
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/gdpr/get-all-user-data-gdpr
      operationId: getAllUserData
      tags:
        - GDPR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - organizationId
                    - userId
                  properties:
                    organizationId:
                      type: string
                      description: Organization ID
                    userId:
                      type: string
                      description: User ID
                    pageToken:
                      type: string
                      description: Page token from previous API call (optional)
            example:
              data:
                organizationId: yourOrganizationId
                userId: yourUserId
                pageToken: yourPageToken
      responses:
        '200':
          description: Data fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/data/delete:
    post:
      summary: Delete All User Data (GDPR)
      description: |
        Use this API to permanently delete all user data (GDPR compliance).
        
        **Warning:**
        This will permanently delete all data associated with the specified users including comments, annotations, and other collaboration data.
        
        **Key Points:**
        - Can delete data for multiple users across multiple organizations
        - Returns a jobId to track deletion status
        - Used for GDPR right to erasure requests
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/gdpr/delete-all-user-data-gdpr
      operationId: deleteAllUserData
      tags:
        - GDPR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - userIds
                    - organizationIds
                  properties:
                    userIds:
                      type: array
                      items:
                        type: string
                      description: Array of User IDs
                    organizationIds:
                      type: array
                      items:
                        type: string
                      description: Array of Organization IDs
            example:
              data:
                userIds: [yourUserId1, yourUserId2]
                organizationIds: [yourOrganizationId1, yourOrganizationId2]
      responses:
        '200':
          description: Deletion initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        example: success
                      message:
                        type: string
                      data:
                        type: object
                        properties:
                          jobId:
                            type: string
                            description: Job ID to track deletion status
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/data/delete/status:
    post:
      summary: Get Delete All User Data Status (GDPR)
      description: |
        Use this API to check the status of user data deletion jobs.
        
        **Key Points:**
        - Track the progress of deletion operations
        - Returns status: pending, in-progress, completed, or failed
        - Use the jobId returned from the delete all user data API
        
        📚 Full Documentation: https://docs.velt.dev/api-reference/rest-apis/v2/gdpr/get-delete-user-data-status-gdpr
      operationId: getDeleteAllUserDataStatus
      tags:
        - GDPR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - jobId
                  properties:
                    jobId:
                      type: string
                      description: Job ID from delete all user data API
            example:
              data:
                jobId: yourJobId
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

