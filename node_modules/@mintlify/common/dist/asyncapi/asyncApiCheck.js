var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Parser } from '@asyncapi/parser';
export function asyncApiCheck(obj) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        try {
            const objectAsInput = typeof obj === 'string' ? obj : JSON.stringify(obj);
            const parser = new Parser();
            const { document: schema, diagnostics } = yield parser.parse(objectAsInput);
            if (diagnostics.length > 0) {
                throw new Error((_a = diagnostics[0]) === null || _a === void 0 ? void 0 : _a.message);
            }
            return schema;
        }
        catch (_b) {
            return undefined;
        }
    });
}
