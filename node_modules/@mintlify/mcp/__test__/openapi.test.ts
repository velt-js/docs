import { OpenAPI } from '@mintlify/openapi-types';
import { describe, expect, test } from 'vitest';
import { z } from 'zod';

import {
  getEndpointsFromOpenApi,
  convertEndpointToCategorizedZod,
} from '../src/mcp-template/src/openapi/helpers.js';

const mockOpenApiSpec: OpenAPI.Document = {
  openapi: '3.0.0',
  info: {
    title: 'Test API',
    version: '1.0.0',
  },
  paths: {
    '/pets': {
      get: {
        operationId: 'getPets',
        parameters: [
          {
            name: 'limit',
            in: 'query',
            schema: {
              type: 'integer',
              minimum: 1,
              maximum: 100,
            },
          },
        ],
        responses: {
          '200': {
            description: 'List of pets',
            content: {
              'application/json': {
                schema: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      id: { type: 'integer' },
                      name: { type: 'string' },
                    },
                  },
                },
              },
            },
          },
        },
      },
      post: {
        operationId: 'createPet',
        requestBody: {
          content: {
            'application/json': {
              schema: {
                type: 'object',
                properties: {
                  name: { type: 'string' },
                  type: { type: 'string' },
                },
                required: ['name'],
              },
            },
          },
        },
        security: [
          {
            apiKey: [],
          },
        ],
        responses: {
          '201': {
            description: 'Pet created',
          },
        },
      },
    },
  },
};

describe('OpenAPI Helpers', () => {
  describe('getEndpointsFromOpenApi', () => {
    test('should extract endpoints from OpenAPI spec', () => {
      const endpoints = getEndpointsFromOpenApi(mockOpenApiSpec);

      expect(endpoints).toHaveLength(2);
      expect(endpoints[0]!.method).toBe('get');
      expect(endpoints[0]!.path).toBe('/pets');
      expect(endpoints[1]!.method).toBe('post');
      expect(endpoints[1]!.path).toBe('/pets');
    });

    test('should handle empty paths object', () => {
      const emptySpec = { ...mockOpenApiSpec, paths: {} };
      const endpoints = getEndpointsFromOpenApi(emptySpec);
      expect(endpoints).toHaveLength(0);
    });
  });

  describe('convertEndpointToCategorizedZod', () => {
    test('should convert endpoint parameters to Zod schemas', () => {
      const endpoints = getEndpointsFromOpenApi(mockOpenApiSpec);
      const getEndpoint = endpoints[0]!;

      const converted = convertEndpointToCategorizedZod(getEndpoint);

      expect(converted.method).toBe('get');
      expect(converted.queries).toBeDefined();
      expect(converted.queries.limit).toBeInstanceOf(z.ZodType);
    });

    test('should handle endpoints with request bodies', () => {
      const endpoints = getEndpointsFromOpenApi(mockOpenApiSpec);
      const postEndpoint = endpoints[1]!;

      const converted = convertEndpointToCategorizedZod(postEndpoint);

      expect(converted.method).toBe('post');
      expect(converted.body).toBeDefined();
      expect(converted.body?.body).toBeInstanceOf(z.ZodType);
    });
  });
});
