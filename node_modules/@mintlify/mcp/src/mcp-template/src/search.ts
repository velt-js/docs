import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import axios from 'axios';
import { TrieveSDK } from 'trieve-ts-sdk';
import { z } from 'zod';

import { SUBDOMAIN } from './config.readonly.js';
import { SERVER_URL } from './config.readonly.js';
import { InitializationConfiguration, SearchResult } from './types.js';
import { formatErr } from './utils.js';

const DEFAULT_BASE_URL = 'https://api.mintlifytrieve.com';

export async function fetchSearchConfigurationAndOpenApi(
  subdomain: string
): Promise<InitializationConfiguration> {
  try {
    const url = `${SERVER_URL}/api/mcp/cli/${subdomain}`;
    const { data } = await axios.get(url);
    if (!data) {
      throw new Error('Empty response received');
    }
    return data;
  } catch (err) {
    throw new Error(`Error fetching ${subdomain}'s MCP config': ${formatErr(err)}`);
  }
}

async function search(query: string, config: InitializationConfiguration): Promise<SearchResult[]> {
  const trieve = new TrieveSDK({
    apiKey: config.trieveApiKey,
    datasetId: config.trieveDatasetId,
    baseUrl: DEFAULT_BASE_URL,
  });
  const data = await trieve.autocomplete({
    page_size: 10,
    query,
    search_type: 'fulltext',
    extend_results: true,
    score_threshold: 1,
  });

  if (data.chunks === undefined || data.chunks.length === 0) {
    throw new Error('No results found');
  }

  return data.chunks.map(
    (result: {
      chunk: { id: string; link: string; chunk_html: string; metadata: { title: string } };
    }) => {
      const { chunk } = result;
      // TODO: Append custom domain to the link
      return {
        title: chunk.metadata.title,
        content: chunk.chunk_html,
        link: chunk.link,
      };
    }
  );
}

export async function createSearchTool(server: McpServer) {
  const config = await fetchSearchConfigurationAndOpenApi(SUBDOMAIN);

  server.tool(
    'search',
    `Search across the ${config.name} documentation to fetch relevant context for a given query`,
    {
      query: z.string(),
    },
    async ({ query }) => {
      const results = await search(query, config);
      const content = results.map((result) => {
        const { title, content, link } = result;
        const text = `Title: ${title}\nContent: ${content}\nLink: ${link}`;

        return {
          type: 'text' as const,
          text,
        };
      });

      return {
        content,
      };
    }
  );
}
