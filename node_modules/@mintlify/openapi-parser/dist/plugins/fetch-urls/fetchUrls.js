const fetchUrlsDefaultConfiguration = {
    limit: 20,
};
const fetchUrls = (customConfiguration) => {
    // State
    let numberOfRequests = 0;
    // Configuration
    const configuration = {
        ...fetchUrlsDefaultConfiguration,
        ...customConfiguration,
    };
    return {
        check(value) {
            // Not a string
            if (typeof value !== 'string') {
                return false;
            }
            // Not http/https
            if (!value.startsWith('http://') && !value.startsWith('https://')) {
                return false;
            }
            return true;
        },
        async get(value) {
            // Limit ht enumber of requests
            if (configuration?.limit !== false &&
                numberOfRequests >= configuration?.limit) {
                console.warn(`[fetchUrls] Maximum number of requests reeached (${configuration?.limit}), skipping request`);
                return undefined;
            }
            try {
                numberOfRequests++;
                const response = await (configuration?.fetch
                    ? configuration.fetch(value)
                    : fetch(value));
                return await response.text();
            }
            catch (error) {
                console.error('[fetchUrls]', error.message, `(${value})`);
            }
        },
    };
};

export { fetchUrls, fetchUrlsDefaultConfiguration };
