import { z } from 'zod';
import { asyncApiSchema } from '../reusable/asyncapi.js';
import { colorSchemaWithOptionalLightAndDark } from '../reusable/color.js';
import { hiddenSchema } from '../reusable/hidden.js';
import { hrefSchema } from '../reusable/href.js';
import { iconSchema } from '../reusable/icon.js';
import { openApiSchema } from '../reusable/openapi.js';
import { decoratedDropdownsSchema, dropdownsSchema } from './dropdown.js';
import { globalSchema } from './global.js';
import { decoratedGroupsSchema, groupsSchema } from './groups.js';
import { decoratedLanguagesSchema, languagesSchema } from './languages.js';
import { decoratedPagesSchema, pagesSchema } from './pages.js';
import { decoratedTabsSchema, tabsSchema } from './tabs.js';
import { decoratedVersionsSchema, versionsSchema } from './version.js';
export const baseAnchorSchema = z.object({
    anchor: z.string().nonempty().describe('The name of the anchor'),
    icon: iconSchema.optional(),
    color: colorSchemaWithOptionalLightAndDark.optional(),
    hidden: hiddenSchema.optional(),
});
export const nonRecursiveAnchorSchema = baseAnchorSchema.extend({ href: hrefSchema });
export const anchorSchema = z.union([
    baseAnchorSchema.extend({
        href: hrefSchema,
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema.optional()),
    }),
    baseAnchorSchema.extend({
        languages: z.lazy(() => languagesSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        versions: z.lazy(() => versionsSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        dropdowns: z.lazy(() => dropdownsSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        tabs: z.lazy(() => tabsSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        groups: z.lazy(() => groupsSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        pages: z.lazy(() => pagesSchema),
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
    baseAnchorSchema.extend({
        openapi: openApiSchema.optional(),
        asyncapi: asyncApiSchema.optional(),
        global: z.lazy(() => globalSchema).optional(),
    }),
]);
export const decoratedAnchorSchema = baseAnchorSchema.and(z.union([
    z.object({ href: hrefSchema }),
    z.lazy(() => z.object({ languages: decoratedLanguagesSchema, global: globalSchema.optional() })),
    z.lazy(() => z.object({ versions: decoratedVersionsSchema, global: globalSchema.optional() })),
    z.lazy(() => z.object({ dropdowns: decoratedDropdownsSchema, global: globalSchema.optional() })),
    z.lazy(() => z.object({ tabs: decoratedTabsSchema, global: globalSchema.optional() })),
    z.lazy(() => z.object({ groups: decoratedGroupsSchema, global: globalSchema.optional() })),
    z.lazy(() => z.object({ pages: decoratedPagesSchema, global: globalSchema.optional() })),
]));
export const anchorsSchema = z
    .array(anchorSchema)
    .min(1, 'At least one anchor must be specified')
    .describe('Organizing by anchors');
export const decoratedAnchorsSchema = z
    .array(decoratedAnchorSchema)
    .describe('Organizing by anchors');
