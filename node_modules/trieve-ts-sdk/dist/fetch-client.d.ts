import type { $OpenApiTs } from "./types.gen";
export type * from "./types.gen";
type HttpMethod = "get" | "post" | "put" | "delete" | "patch";
type Paths = keyof $OpenApiTs;
type MethodsForPath<P extends Paths> = keyof $OpenApiTs[P];
type SuccessStatusCode = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 226;
type RenameFields<T> = {
    [K in keyof T as K extends "trDataset" ? "datasetId" : K extends "trOrganization" ? "organizationId" : K extends "requestBody" ? "data" : K]: T[K];
};
type RequestParams<P extends Paths, M extends MethodsForPath<P>> = $OpenApiTs[P][M] extends {
    req: infer R;
} ? RenameFields<R> : never;
export type RequestBody<P extends Paths, M extends MethodsForPath<P>> = $OpenApiTs[P][M] extends {
    req: {
        requestBody: infer R;
    };
} ? R : never;
export type ResponseBody<P extends Paths, M extends MethodsForPath<P>> = $OpenApiTs[P][M] extends {
    res: infer R;
} ? R extends {
    [K in SuccessStatusCode]?: any;
} ? R[Extract<keyof R, SuccessStatusCode>] : never : never;
type EjectOption = "eject" | false;
type EjectedRequestBase<T> = {
    datasetId?: string;
    organizationId?: string;
    data?: T;
    [key: string]: any;
};
interface TrieveOpts {
    apiKey?: string;
    baseUrl: string;
    debug?: boolean;
    organizationId?: string;
    omitCredentials?: boolean;
}
export declare class TrieveFetchClient {
    apiKey?: string;
    baseUrl: string;
    debug: boolean;
    organizationId?: string;
    omitCredentials?: boolean;
    constructor(opts: TrieveOpts);
    fetch<EJECT extends EjectOption = false, URQ = EJECT extends "eject" ? EjectedRequestBase<any> : never, URE = EJECT extends "eject" ? unknown : never, P extends Paths = Paths, M extends EJECT extends false ? MethodsForPath<P> & HttpMethod : any = MethodsForPath<P> & HttpMethod>(path: P, method: EJECT extends false ? M : HttpMethod, params?: EJECT extends false ? RequestParams<P, M> : URQ, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<EJECT extends false ? ResponseBody<P, M> : URE>;
}
//# sourceMappingURL=fetch-client.d.ts.map