/**
 * This includes all the functions you can use to communicate with our datasets endpoint
 *
 * @module Dataset Methods
 */
import { TrieveSDK } from "../../sdk";
import { CreateDatasetBatchReqPayload, CreateDatasetReqPayload, Dataset, DatasetAndUsage, DatasetUsageCount, EventReturn, FileData, GetAllTagsReqPayload, GetAllTagsResponse, GetEventsData, GetPagefindIndexResponse, UpdateDatasetReqPayload } from "../../types.gen";
/**
 * Function that provides the ability to create a dataset. This function is used to create a new dataset in the organization.
 *
 * Example:
 * ```js
 * const dataset = await trieve.createDataset({
 *  dataset_name: "My Dataset",
 * });
 * ```
 */
export declare function createDataset(
/** @hidden */
this: TrieveSDK, props: CreateDatasetReqPayload, signal?: AbortSignal): Promise<Dataset>;
/**
 * Function that provides the ability to update a dataset. This function is used to update an existing dataset in the organization by ID or Tracking ID.
 *
 * Example:
 * ```js
 * const dataset = await trieve.updateDataset({
 *   tracking_id: "123456",
 *   dataset_name: "change to this name",
 * });
 * ```
 */
export declare function updateDataset(
/** @hidden */
this: TrieveSDK, props: UpdateDatasetReqPayload, signal?: AbortSignal): Promise<Dataset>;
/**
 * Function that provides the ability to create datasets in batch. This function is used to create multiple datasets in the organization.
 *
 * Example:
 * ```js
 * const datasets = await trieve.batchCreateDatasets({
 *  datasets: [
 *    {
 *       dataset_name: "My Dataset 1",
 *    },
 *  ]});
 * ```
 */
export declare function batchCreateDatasets(
/** @hidden */
this: TrieveSDK, props: CreateDatasetBatchReqPayload, signal?: AbortSignal): Promise<Dataset[]>;
/**
 * Function that provides the ability to remove all data from a dataset. This function is used to clear all data from a dataset.
 *
 * Example:
 * ```js
 * await trieve.clearDataset("1111-2222-3333-4444");
 */
export declare function clearDataset(
/** @hidden */
this: TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<void>;
export declare function getDatasetEvents(
/** @hidden */
this: TrieveSDK, props: GetEventsData, datasetId: string, signal?: AbortSignal): Promise<EventReturn>;
export declare function getDatasetFiles(
/** @hidden */
this: TrieveSDK, datasetId: string, page: number, signal?: AbortSignal): Promise<FileData>;
export declare function getAllDatasetTags(
/** @hidden */
this: TrieveSDK, props: GetAllTagsReqPayload, datasetId: string, signal?: AbortSignal): Promise<GetAllTagsResponse>;
export declare function getDatasetsFromOrganization(
/** @hidden */
this: TrieveSDK, organizationId: string, limit?: number, offset?: number, signal?: AbortSignal): Promise<DatasetAndUsage[]>;
export declare function getDatasetByTrackingId(
/** @hidden */
this: TrieveSDK, trackingId: string, signal?: AbortSignal): Promise<Dataset>;
export declare function getDatasetUsageById(
/** @hidden */
this: TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<DatasetUsageCount>;
export declare function getDatasetById(
/** @hidden */
this: TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<Dataset>;
export declare function deleteDataset(
/** @hidden */
this: TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<void>;
export declare function getPagefindUrl(
/** @hidden */
this: TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<GetPagefindIndexResponse>;
//# sourceMappingURL=index.d.ts.map