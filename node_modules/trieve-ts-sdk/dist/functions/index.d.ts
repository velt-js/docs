declare const _default: {
    getCrawlsForDataset(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GetCrawlRequestsForDatasetData, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset>;
    createOrganizationApiKey(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").CreateApiKeyReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").CreateApiKeyResponse>;
    deleteOrganizationApiKey(this: import("../sdk.ts").TrieveSDK, apiKeyId: string, signal?: AbortSignal): Promise<void>;
    updateUserRole(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").UpdateUserOrgRoleReqPayload, signal?: AbortSignal): Promise<void>;
    createDataset(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").CreateDatasetReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset>;
    updateDataset(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").UpdateDatasetReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset>;
    batchCreateDatasets(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").CreateDatasetBatchReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset[]>;
    clearDataset(this: import("../sdk.ts").TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<void>;
    getDatasetEvents(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GetEventsData, datasetId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").EventReturn>;
    getDatasetFiles(this: import("../sdk.ts").TrieveSDK, datasetId: string, page: number, signal?: AbortSignal): Promise<import("../types.gen.ts").FileData>;
    getAllDatasetTags(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GetAllTagsReqPayload, datasetId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").GetAllTagsResponse>;
    getDatasetsFromOrganization(this: import("../sdk.ts").TrieveSDK, organizationId: string, limit?: number, offset?: number, signal?: AbortSignal): Promise<import("../types.gen.ts").DatasetAndUsage[]>;
    getDatasetByTrackingId(this: import("../sdk.ts").TrieveSDK, trackingId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset>;
    getDatasetUsageById(this: import("../sdk.ts").TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").DatasetUsageCount>;
    getDatasetById(this: import("../sdk.ts").TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").Dataset>;
    deleteDataset(this: import("../sdk.ts").TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<void>;
    getPagefindUrl(this: import("../sdk.ts").TrieveSDK, datasetId: string, signal?: AbortSignal): Promise<import("../types.gen.ts").GetPagefindIndexResponse>;
    getEventsForDataset(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").GetEventsData, signal?: AbortSignal): Promise<import("../types.gen.ts").EventReturn>;
    uploadFile(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").UploadFileReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").UploadFileResponseBody>;
    createPresignedUrlForCsvJsonl(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CreatePresignedUrlForCsvJsonlReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").CreatePresignedUrlForCsvJsonResponseBody>;
    getFilesForDataset(this: import("../sdk.ts").TrieveSDK, data: Omit<Omit<import("../types.gen.ts").GetDatasetFilesHandlerData, "datasetId">, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").FileData>;
    getFile(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetFileHandlerData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").FileDTO>;
    deleteFile(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").DeleteFileHandlerData, "trDataset">, signal?: AbortSignal): Promise<void>;
    createMessage(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CreateMessageReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<string>;
    createMessageReader(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CreateMessageReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<ReadableStreamDefaultReader<Uint8Array>>;
    createMessageReaderWithQueryId(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CreateMessageReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<{
        reader: ReadableStreamDefaultReader<Uint8Array>;
        queryId: string | null;
    }>;
    editMessage(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").EditMessageReqPayload, signal?: AbortSignal): Promise<string>;
    editMessageReader(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").EditMessageReqPayload, signal?: AbortSignal): Promise<ReadableStreamDefaultReader<Uint8Array>>;
    editMessageReaderWithQueryId(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").EditMessageReqPayload, signal?: AbortSignal): Promise<{
        reader: ReadableStreamDefaultReader<Uint8Array>;
        queryId: string | null;
    }>;
    regenerateMessage(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RegenerateMessageReqPayload, signal?: AbortSignal): Promise<string>;
    regenerateMessageReader(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RegenerateMessageReqPayload, signal?: AbortSignal): Promise<ReadableStreamDefaultReader<Uint8Array>>;
    regenerateMessageReaderWithQueryId(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RegenerateMessageReqPayload, signal?: AbortSignal): Promise<{
        reader: ReadableStreamDefaultReader<Uint8Array>;
        queryId: string | null;
    }>;
    getAllMessagesForTopic(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetAllTopicMessagesData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").Message[]>;
    getMessageById(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetMessageByIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").Message>;
    getToolCallFunctionParams(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").GetToolFunctionParamsReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<import("../types.gen.ts").GetToolFunctionParamsRespBody>;
    getCleanFetch: () => ((input: RequestInfo | URL, init?: RequestInit) => Promise<Response>) | undefined;
    createTopic(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CreateTopicReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").Topic>;
    cloneTopic(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CloneTopicReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").Topic>;
    updateTopic(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").UpdateTopicReqPayload, signal?: AbortSignal): Promise<void>;
    getAllTopics(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetAllTopicsForOwnerIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").Topic[]>;
    deleteTopic(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").DeleteTopicData2, "trDataset">, signal?: AbortSignal): Promise<void>;
    getCTRAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CTRAnalytics, signal?: AbortSignal): Promise<import("../types.gen.ts").CTRAnalyticsResponse>;
    sendCTRAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").CTRDataRequestBody, signal?: AbortSignal): Promise<void>;
    sendAnalyticsEvent(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").EventTypes, signal?: AbortSignal): Promise<void>;
    getRagAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RAGAnalytics, signal?: AbortSignal): Promise<import("../types.gen.ts").RAGAnalyticsResponse>;
    getRecommendationAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RecommendationAnalytics, signal?: AbortSignal): Promise<import("../types.gen.ts").RecommendationAnalyticsResponse>;
    getSearchAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").SearchAnalytics, signal?: AbortSignal): Promise<import("../types.gen.ts").SearchAnalyticsResponse>;
    getClusterAnalytics(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").ClusterAnalytics, signal?: AbortSignal): Promise<import("../types.gen.ts").ClusterAnalyticsResponse>;
    rateRagQuery(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RateQueryRequest, signal?: AbortSignal): Promise<void>;
    rateSearchQuery(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RateQueryRequest, signal?: AbortSignal): Promise<void>;
    getTopDatasets(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").GetTopDatasetsRequestBody & {
        organizationId: string;
    }, signal?: AbortSignal): Promise<import("../types.gen.ts").TopDatasetsResponse[]>;
    getAllAnalyticsEvents(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").GetEventsRequestBody, signal?: AbortSignal): Promise<import("../types.gen.ts").GetEventsResponseBody>;
    createChunkGroup(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").CreateChunkGroupReqPayloadEnum, "datasetId">): Promise<import("../types.gen.ts").CreateChunkGroupResponseEnum>;
    searchOverGroups(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").SearchOverGroupsReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<import("../types.gen.ts").SearchOverGroupsResponseBody>;
    searchInGroup(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").SearchWithinGroupReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<import("../types.gen.ts").SearchWithinGroupResponseBody>;
    recommendedGroups(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RecommendGroupsReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").RecommendGroupsResponseBody>;
    updateGroup(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").UpdateChunkGroupReqPayload, signal?: AbortSignal): Promise<void>;
    addChunkToGroup(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").AddChunkToGroupReqPayload & {
        group_id: string;
    }, signal?: AbortSignal): Promise<void>;
    removeChunkFromGroup(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").RemoveChunkFromGroupReqPayload & {
        group_id: string;
    }, signal?: AbortSignal): Promise<void>;
    getGroupsForChunks(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").GetGroupsForChunksReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").GroupsForChunk[]>;
    getChunksGroupByTrackingId(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetChunksInGroupByTrackingIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").GetChunksInGroupResponse>;
    getGroupByTrackingId(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetGroupByTrackingIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkGroupAndFileId>;
    addChunkToGroupByTrackingId(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").AddChunkToGroupReqPayload & {
        tracking_id: string;
    }, signal?: AbortSignal): Promise<void>;
    deleteGroupByTrackingId(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").DeleteGroupByTrackingIdData & {
        tracking_id: string;
    }, signal?: AbortSignal): Promise<void>;
    getGroup(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetChunkGroupData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkGroupAndFileId>;
    deleteGroup(this: import("../sdk.ts").TrieveSDK, data: import("../types.gen.ts").DeleteChunkGroupData, signal?: AbortSignal): Promise<void>;
    getChunksInGroup(this: import("../sdk.ts").TrieveSDK, data: Omit<import("../types.gen.ts").GetChunksInGroupData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").GetChunksInGroupResponse>;
    getGroupsForDataset(this: import("../sdk.ts").TrieveSDK, data: Omit<Omit<import("../types.gen.ts").GetGroupsForDatasetData, "datasetId">, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").GroupData>;
    search(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").SearchChunksReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<import("../types.gen.ts").SearchResponseBody>;
    createChunk(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").CreateChunkReqPayloadEnum, signal?: AbortSignal): Promise<import("../types.gen.ts").ReturnQueuedChunk>;
    autocomplete(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").AutocompleteReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<import("../types.gen.ts").SearchResponseBody>;
    getRecommendedChunks(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").RecommendChunksRequest, signal?: AbortSignal): Promise<import("../types.gen.ts").RecommendChunksResponseBody>;
    ragOnChunk(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GenerateOffChunksReqPayload, signal?: AbortSignal): Promise<string>;
    ragOnChunkReader(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GenerateOffChunksReqPayload, signal?: AbortSignal): Promise<ReadableStreamDefaultReader<Uint8Array>>;
    ragOnChunkReaderWithQueryId(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GenerateOffChunksReqPayload, signal?: AbortSignal, parseHeaders?: (headers: Record<string, string>) => void): Promise<{
        reader: ReadableStreamDefaultReader<Uint8Array>;
        queryId: string | null;
    }>;
    suggestedQueries(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").SuggestedQueriesReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").SuggestedQueriesResponse>;
    countChunksAboveThreshold(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").CountChunksReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").CountChunkQueryResponseBody>;
    scroll(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").ScrollChunksReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").ScrollChunksResponseBody>;
    updateChunk(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").UpdateChunkReqPayload, signal?: AbortSignal): Promise<void>;
    updateChunkByTrackingId(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").UpdateChunkByTrackingIdData, signal?: AbortSignal): Promise<void>;
    getChunkByTrackingId(this: import("../sdk.ts").TrieveSDK, props: Omit<import("../types.gen.ts").GetChunkByTrackingIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkReturnTypes>;
    deleteChunkByTrackingId(this: import("../sdk.ts").TrieveSDK, props: Omit<import("../types.gen.ts").DeleteChunkByTrackingIdData, "trDataset">, signal?: AbortSignal): Promise<void>;
    getChunkById(this: import("../sdk.ts").TrieveSDK, props: Omit<import("../types.gen.ts").GetChunkByIdData, "trDataset">, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkReturnTypes>;
    deleteChunkById(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").DeleteChunkData, signal?: AbortSignal): Promise<void>;
    getChunksByIds(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GetChunksData, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkReturnTypes[]>;
    getChunksByTrackingIds(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").GetTrackingChunksData, signal?: AbortSignal): Promise<import("../types.gen.ts").ChunkReturnTypes[]>;
    splitChunkHtml(this: import("../sdk.ts").TrieveSDK, props: import("../types.gen.ts").ChunkHtmlContentReqPayload, signal?: AbortSignal): Promise<import("../types.gen.ts").SplitHtmlResponse>;
};
export default _default;
//# sourceMappingURL=index.d.ts.map